/*
 * Handles command line flags. This funcation removes them when finished, returning the new number of args.
 *
 * Modifes argv by removing the pointers to the flags.
 *
 * Returns the new number of args (argc)
 *
 * Acceptable flags:
 * -h - help
 * -s - use stdout for output instead of a socket. Ignores the port arg.
 * -i [ip_addr] - use ip_addr for the ip to send to (default ip: localhost)
 */
int handle_flags(int argc, char **argv, struct joy_opts &opt)
{
        int i, j;
        for(i = 1; i < argc; i++) {
                if(argv[i][0] == '-') {
                        switch(argv[i][1]) {
                        case 'h':
                                print_help(argv[0]);
                                exit(0);
                        case 's':
                                opt->use_stdout = 1;
                                break;
                        case 'i':
                                if(argc < i + 2) {
                                        printf("Error: no ip specified despite -i flag given\n");
                                        exit(1);
                                }
                                opt->ip = argv[i + 1];

                                /* remove argv[i + 1] from argv */
                                argc--;
                                for(j = i + 1; j < argc; j++)
                                        argv[j] = argv[j + 1];
                                break;
                        default:
                                throw_js_exception("Unrecognizable flag %c", argv[i][2]);
                                exit(1);
                        }
                        /* remove argv[i] from argv */
                        argc--;
                        for(j = i; j < argc; j++) 
                                argv[j] = argv[j + 1];
                        /* deincrement i so that it doesn't skip the next argument */
                        i--;
                }
        }

        return i;
}
